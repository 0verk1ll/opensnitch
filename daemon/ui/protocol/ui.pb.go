// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ui.proto

/*
Package protocol is a generated protocol buffer package.

It is generated from these files:
	ui.proto

It has these top-level messages:
	Event
	Statistics
	PingRequest
	PingReply
	Connection
	Operator
	Rule
*/
package protocol

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Event struct {
	Time       string      `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	Connection *Connection `protobuf:"bytes,2,opt,name=connection" json:"connection,omitempty"`
	Rule       *Rule       `protobuf:"bytes,3,opt,name=rule" json:"rule,omitempty"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Event) GetTime() string {
	if m != nil {
		return m.Time
	}
	return ""
}

func (m *Event) GetConnection() *Connection {
	if m != nil {
		return m.Connection
	}
	return nil
}

func (m *Event) GetRule() *Rule {
	if m != nil {
		return m.Rule
	}
	return nil
}

type Statistics struct {
	DaemonVersion string            `protobuf:"bytes,1,opt,name=daemon_version,json=daemonVersion" json:"daemon_version,omitempty"`
	Uptime        uint64            `protobuf:"varint,2,opt,name=uptime" json:"uptime,omitempty"`
	DnsResponses  uint64            `protobuf:"varint,3,opt,name=dns_responses,json=dnsResponses" json:"dns_responses,omitempty"`
	Connections   uint64            `protobuf:"varint,4,opt,name=connections" json:"connections,omitempty"`
	Ignored       uint64            `protobuf:"varint,5,opt,name=ignored" json:"ignored,omitempty"`
	Accepted      uint64            `protobuf:"varint,6,opt,name=accepted" json:"accepted,omitempty"`
	Dropped       uint64            `protobuf:"varint,7,opt,name=dropped" json:"dropped,omitempty"`
	RuleHits      uint64            `protobuf:"varint,8,opt,name=rule_hits,json=ruleHits" json:"rule_hits,omitempty"`
	RuleMisses    uint64            `protobuf:"varint,9,opt,name=rule_misses,json=ruleMisses" json:"rule_misses,omitempty"`
	ByProto       map[string]uint64 `protobuf:"bytes,10,rep,name=by_proto,json=byProto" json:"by_proto,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ByAddress     map[string]uint64 `protobuf:"bytes,11,rep,name=by_address,json=byAddress" json:"by_address,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ByHost        map[string]uint64 `protobuf:"bytes,12,rep,name=by_host,json=byHost" json:"by_host,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ByPort        map[string]uint64 `protobuf:"bytes,13,rep,name=by_port,json=byPort" json:"by_port,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ByUid         map[string]uint64 `protobuf:"bytes,14,rep,name=by_uid,json=byUid" json:"by_uid,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ByExecutable  map[string]uint64 `protobuf:"bytes,15,rep,name=by_executable,json=byExecutable" json:"by_executable,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Events        []*Event          `protobuf:"bytes,16,rep,name=events" json:"events,omitempty"`
}

func (m *Statistics) Reset()                    { *m = Statistics{} }
func (m *Statistics) String() string            { return proto.CompactTextString(m) }
func (*Statistics) ProtoMessage()               {}
func (*Statistics) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Statistics) GetDaemonVersion() string {
	if m != nil {
		return m.DaemonVersion
	}
	return ""
}

func (m *Statistics) GetUptime() uint64 {
	if m != nil {
		return m.Uptime
	}
	return 0
}

func (m *Statistics) GetDnsResponses() uint64 {
	if m != nil {
		return m.DnsResponses
	}
	return 0
}

func (m *Statistics) GetConnections() uint64 {
	if m != nil {
		return m.Connections
	}
	return 0
}

func (m *Statistics) GetIgnored() uint64 {
	if m != nil {
		return m.Ignored
	}
	return 0
}

func (m *Statistics) GetAccepted() uint64 {
	if m != nil {
		return m.Accepted
	}
	return 0
}

func (m *Statistics) GetDropped() uint64 {
	if m != nil {
		return m.Dropped
	}
	return 0
}

func (m *Statistics) GetRuleHits() uint64 {
	if m != nil {
		return m.RuleHits
	}
	return 0
}

func (m *Statistics) GetRuleMisses() uint64 {
	if m != nil {
		return m.RuleMisses
	}
	return 0
}

func (m *Statistics) GetByProto() map[string]uint64 {
	if m != nil {
		return m.ByProto
	}
	return nil
}

func (m *Statistics) GetByAddress() map[string]uint64 {
	if m != nil {
		return m.ByAddress
	}
	return nil
}

func (m *Statistics) GetByHost() map[string]uint64 {
	if m != nil {
		return m.ByHost
	}
	return nil
}

func (m *Statistics) GetByPort() map[string]uint64 {
	if m != nil {
		return m.ByPort
	}
	return nil
}

func (m *Statistics) GetByUid() map[string]uint64 {
	if m != nil {
		return m.ByUid
	}
	return nil
}

func (m *Statistics) GetByExecutable() map[string]uint64 {
	if m != nil {
		return m.ByExecutable
	}
	return nil
}

func (m *Statistics) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type PingRequest struct {
	Id    uint64      `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Stats *Statistics `protobuf:"bytes,2,opt,name=stats" json:"stats,omitempty"`
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PingRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PingRequest) GetStats() *Statistics {
	if m != nil {
		return m.Stats
	}
	return nil
}

type PingReply struct {
	Id uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
}

func (m *PingReply) Reset()                    { *m = PingReply{} }
func (m *PingReply) String() string            { return proto.CompactTextString(m) }
func (*PingReply) ProtoMessage()               {}
func (*PingReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PingReply) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Connection struct {
	Protocol    string   `protobuf:"bytes,1,opt,name=protocol" json:"protocol,omitempty"`
	SrcIp       string   `protobuf:"bytes,2,opt,name=src_ip,json=srcIp" json:"src_ip,omitempty"`
	SrcPort     uint32   `protobuf:"varint,3,opt,name=src_port,json=srcPort" json:"src_port,omitempty"`
	DstIp       string   `protobuf:"bytes,4,opt,name=dst_ip,json=dstIp" json:"dst_ip,omitempty"`
	DstHost     string   `protobuf:"bytes,5,opt,name=dst_host,json=dstHost" json:"dst_host,omitempty"`
	DstPort     uint32   `protobuf:"varint,6,opt,name=dst_port,json=dstPort" json:"dst_port,omitempty"`
	UserId      uint32   `protobuf:"varint,7,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ProcessId   uint32   `protobuf:"varint,8,opt,name=process_id,json=processId" json:"process_id,omitempty"`
	ProcessPath string   `protobuf:"bytes,9,opt,name=process_path,json=processPath" json:"process_path,omitempty"`
	ProcessArgs []string `protobuf:"bytes,10,rep,name=process_args,json=processArgs" json:"process_args,omitempty"`
}

func (m *Connection) Reset()                    { *m = Connection{} }
func (m *Connection) String() string            { return proto.CompactTextString(m) }
func (*Connection) ProtoMessage()               {}
func (*Connection) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Connection) GetProtocol() string {
	if m != nil {
		return m.Protocol
	}
	return ""
}

func (m *Connection) GetSrcIp() string {
	if m != nil {
		return m.SrcIp
	}
	return ""
}

func (m *Connection) GetSrcPort() uint32 {
	if m != nil {
		return m.SrcPort
	}
	return 0
}

func (m *Connection) GetDstIp() string {
	if m != nil {
		return m.DstIp
	}
	return ""
}

func (m *Connection) GetDstHost() string {
	if m != nil {
		return m.DstHost
	}
	return ""
}

func (m *Connection) GetDstPort() uint32 {
	if m != nil {
		return m.DstPort
	}
	return 0
}

func (m *Connection) GetUserId() uint32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *Connection) GetProcessId() uint32 {
	if m != nil {
		return m.ProcessId
	}
	return 0
}

func (m *Connection) GetProcessPath() string {
	if m != nil {
		return m.ProcessPath
	}
	return ""
}

func (m *Connection) GetProcessArgs() []string {
	if m != nil {
		return m.ProcessArgs
	}
	return nil
}

type Operator struct {
	Type    string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Operand string `protobuf:"bytes,2,opt,name=operand" json:"operand,omitempty"`
	Data    string `protobuf:"bytes,3,opt,name=data" json:"data,omitempty"`
}

func (m *Operator) Reset()                    { *m = Operator{} }
func (m *Operator) String() string            { return proto.CompactTextString(m) }
func (*Operator) ProtoMessage()               {}
func (*Operator) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Operator) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Operator) GetOperand() string {
	if m != nil {
		return m.Operand
	}
	return ""
}

func (m *Operator) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

type Rule struct {
	Name     string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Action   string    `protobuf:"bytes,2,opt,name=action" json:"action,omitempty"`
	Duration string    `protobuf:"bytes,3,opt,name=duration" json:"duration,omitempty"`
	Operator *Operator `protobuf:"bytes,4,opt,name=operator" json:"operator,omitempty"`
}

func (m *Rule) Reset()                    { *m = Rule{} }
func (m *Rule) String() string            { return proto.CompactTextString(m) }
func (*Rule) ProtoMessage()               {}
func (*Rule) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Rule) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Rule) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *Rule) GetDuration() string {
	if m != nil {
		return m.Duration
	}
	return ""
}

func (m *Rule) GetOperator() *Operator {
	if m != nil {
		return m.Operator
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "protocol.Event")
	proto.RegisterType((*Statistics)(nil), "protocol.Statistics")
	proto.RegisterType((*PingRequest)(nil), "protocol.PingRequest")
	proto.RegisterType((*PingReply)(nil), "protocol.PingReply")
	proto.RegisterType((*Connection)(nil), "protocol.Connection")
	proto.RegisterType((*Operator)(nil), "protocol.Operator")
	proto.RegisterType((*Rule)(nil), "protocol.Rule")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for UI service

type UIClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error)
	AskRule(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*Rule, error)
}

type uIClient struct {
	cc *grpc.ClientConn
}

func NewUIClient(cc *grpc.ClientConn) UIClient {
	return &uIClient{cc}
}

func (c *uIClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingReply, error) {
	out := new(PingReply)
	err := grpc.Invoke(ctx, "/protocol.UI/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uIClient) AskRule(ctx context.Context, in *Connection, opts ...grpc.CallOption) (*Rule, error) {
	out := new(Rule)
	err := grpc.Invoke(ctx, "/protocol.UI/AskRule", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UI service

type UIServer interface {
	Ping(context.Context, *PingRequest) (*PingReply, error)
	AskRule(context.Context, *Connection) (*Rule, error)
}

func RegisterUIServer(s *grpc.Server, srv UIServer) {
	s.RegisterService(&_UI_serviceDesc, srv)
}

func _UI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.UI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UI_AskRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Connection)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UIServer).AskRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protocol.UI/AskRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UIServer).AskRule(ctx, req.(*Connection))
	}
	return interceptor(ctx, in, info, handler)
}

var _UI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.UI",
	HandlerType: (*UIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _UI_Ping_Handler,
		},
		{
			MethodName: "AskRule",
			Handler:    _UI_AskRule_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ui.proto",
}

func init() { proto.RegisterFile("ui.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 830 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0x51, 0x8f, 0xdb, 0x44,
	0x10, 0xee, 0xe5, 0x1c, 0xc7, 0x1e, 0x27, 0x69, 0x59, 0x7a, 0x60, 0x52, 0xa1, 0xa6, 0xae, 0x80,
	0x13, 0x0f, 0x91, 0x38, 0x2a, 0xd4, 0x56, 0x95, 0xd0, 0x15, 0x9d, 0xd4, 0x08, 0x10, 0xa7, 0x45,
	0xe5, 0xd5, 0xb2, 0xbd, 0xab, 0x3b, 0xab, 0x39, 0xaf, 0xd9, 0x59, 0x9f, 0xf0, 0x0b, 0xff, 0x86,
	0x1f, 0xc0, 0x3f, 0x44, 0x3b, 0x6b, 0xc7, 0xe1, 0x8e, 0x20, 0xe5, 0x29, 0x3b, 0xdf, 0x37, 0xdf,
	0xe7, 0xc9, 0xec, 0xee, 0x2c, 0x04, 0x4d, 0xb9, 0xaa, 0xb5, 0x32, 0x8a, 0x05, 0xf4, 0x53, 0xa8,
	0x4d, 0xd2, 0xc0, 0xf8, 0xe2, 0x56, 0x56, 0x86, 0x31, 0xf0, 0x4c, 0x79, 0x23, 0xe3, 0xa3, 0xe5,
	0xd1, 0x69, 0xc8, 0x69, 0xcd, 0x5e, 0x00, 0x14, 0xaa, 0xaa, 0x64, 0x61, 0x4a, 0x55, 0xc5, 0xa3,
	0xe5, 0xd1, 0x69, 0x74, 0xf6, 0x78, 0xd5, 0x6b, 0x57, 0x3f, 0x6c, 0x39, 0xbe, 0x93, 0xc7, 0x12,
	0xf0, 0x74, 0xb3, 0x91, 0xf1, 0x31, 0xe5, 0xcf, 0x87, 0x7c, 0xde, 0x6c, 0x24, 0x27, 0x2e, 0xf9,
	0x3b, 0x00, 0xf8, 0xd5, 0x64, 0xa6, 0x44, 0x53, 0x16, 0xc8, 0xbe, 0x80, 0xb9, 0xc8, 0xe4, 0x8d,
	0xaa, 0xd2, 0x5b, 0xa9, 0xd1, 0x7e, 0xcc, 0x95, 0x31, 0x73, 0xe8, 0x6f, 0x0e, 0x64, 0x9f, 0x80,
	0xdf, 0xd4, 0x54, 0xa5, 0xad, 0xc5, 0xe3, 0x5d, 0xc4, 0x9e, 0xc3, 0x4c, 0x54, 0x98, 0x6a, 0x89,
	0xb5, 0xaa, 0x50, 0x22, 0x7d, 0xda, 0xe3, 0x53, 0x51, 0x21, 0xef, 0x31, 0xb6, 0x84, 0x68, 0x28,
	0x12, 0x63, 0x8f, 0x52, 0x76, 0x21, 0x16, 0xc3, 0xa4, 0xbc, 0xaa, 0x94, 0x96, 0x22, 0x1e, 0x13,
	0xdb, 0x87, 0x6c, 0x01, 0x41, 0x56, 0x14, 0xb2, 0x36, 0x52, 0xc4, 0x3e, 0x51, 0xdb, 0xd8, 0xaa,
	0x84, 0x56, 0x75, 0x2d, 0x45, 0x3c, 0x71, 0xaa, 0x2e, 0x64, 0x4f, 0x20, 0xb4, 0x7f, 0x36, 0xbd,
	0x2e, 0x0d, 0xc6, 0x81, 0x93, 0x59, 0xe0, 0x5d, 0x69, 0x90, 0x3d, 0x85, 0x88, 0xc8, 0x9b, 0x12,
	0x6d, 0xc5, 0x21, 0xd1, 0x60, 0xa1, 0x9f, 0x09, 0x61, 0x6f, 0x20, 0xc8, 0xdb, 0x94, 0x9a, 0x17,
	0xc3, 0xf2, 0xf8, 0x34, 0x3a, 0x7b, 0x36, 0xb4, 0x72, 0xe8, 0xdd, 0xea, 0x6d, 0x7b, 0x69, 0xd1,
	0x8b, 0xca, 0xe8, 0x96, 0x4f, 0x72, 0x17, 0xb1, 0xb7, 0x00, 0x79, 0x9b, 0x66, 0x42, 0x68, 0x89,
	0x18, 0x47, 0xa4, 0x7f, 0xbe, 0x47, 0x7f, 0xee, 0xb2, 0x9c, 0x43, 0x98, 0xf7, 0x31, 0x7b, 0x05,
	0x93, 0xbc, 0x4d, 0xaf, 0x15, 0x9a, 0x78, 0x4a, 0x06, 0xcb, 0x3d, 0x06, 0xef, 0x14, 0x1a, 0xa7,
	0xf6, 0x73, 0x0a, 0x3a, 0x69, 0xad, 0xb4, 0x89, 0x67, 0xff, 0x2b, 0xbd, 0x54, 0x7a, 0x90, 0xda,
	0x80, 0x7d, 0x07, 0x7e, 0xde, 0xa6, 0x4d, 0x29, 0xe2, 0x39, 0x29, 0x9f, 0xee, 0x51, 0xbe, 0x2f,
	0x85, 0x13, 0x8e, 0x73, 0xbb, 0x66, 0x3f, 0xc2, 0x2c, 0x6f, 0x53, 0xf9, 0x87, 0x2c, 0x1a, 0x93,
	0xe5, 0x1b, 0x19, 0x3f, 0x24, 0xf9, 0x97, 0x7b, 0xe4, 0x17, 0xdb, 0x44, 0xe7, 0x32, 0xcd, 0x77,
	0x20, 0xf6, 0x15, 0xf8, 0xd2, 0x5e, 0x0b, 0x8c, 0x1f, 0x91, 0xcb, 0xc3, 0xc1, 0x85, 0xae, 0x0b,
	0xef, 0xe8, 0xc5, 0x6b, 0x98, 0xee, 0x6e, 0x00, 0x7b, 0x04, 0xc7, 0x1f, 0x64, 0xdb, 0x1d, 0x5f,
	0xbb, 0x64, 0x8f, 0x61, 0x7c, 0x9b, 0x6d, 0x9a, 0xfe, 0xcc, 0xba, 0xe0, 0xf5, 0xe8, 0xe5, 0xd1,
	0xe2, 0x0d, 0xcc, 0xff, 0xdd, 0xfc, 0x83, 0xd4, 0xaf, 0x20, 0xda, 0xe9, 0xfc, 0xe1, 0xd2, 0x6d,
	0xe7, 0x0f, 0x92, 0xbe, 0x04, 0x18, 0x5a, 0x7f, 0x90, 0xf2, 0x7b, 0xf8, 0xe8, 0x5e, 0xd7, 0x0f,
	0x31, 0x48, 0xd6, 0x10, 0x5d, 0x96, 0xd5, 0x15, 0x97, 0xbf, 0x37, 0x12, 0x0d, 0x9b, 0xc3, 0xa8,
	0x14, 0xa4, 0xf4, 0xf8, 0xa8, 0x14, 0xec, 0x6b, 0x18, 0xa3, 0xc9, 0x0c, 0xde, 0x9f, 0x53, 0xc3,
	0xbe, 0x73, 0x97, 0x92, 0x3c, 0x81, 0xd0, 0x59, 0xd5, 0x9b, 0xf6, 0xae, 0x51, 0xf2, 0xd7, 0x08,
	0x60, 0x18, 0x6d, 0xf6, 0xee, 0xf7, 0x4e, 0x5d, 0x9d, 0xdb, 0x98, 0x9d, 0x80, 0x8f, 0xba, 0x48,
	0xcb, 0x9a, 0x3e, 0x1a, 0xf2, 0x31, 0xea, 0x62, 0x5d, 0xb3, 0xcf, 0x20, 0xb0, 0x30, 0x1d, 0x7f,
	0x3b, 0x8a, 0x66, 0x7c, 0x82, 0xba, 0xa0, 0xd3, 0x7d, 0x02, 0xbe, 0x40, 0x63, 0x15, 0x9e, 0x53,
	0x08, 0x34, 0x4e, 0x61, 0x61, 0xba, 0x6b, 0x63, 0x22, 0x26, 0x02, 0x0d, 0x5d, 0xa5, 0x8e, 0x22,
	0x33, 0xdf, 0x99, 0x09, 0x34, 0x64, 0xf6, 0x29, 0x4c, 0x1a, 0x94, 0x3a, 0x2d, 0xdd, 0xe8, 0x99,
	0x71, 0xdf, 0x86, 0x6b, 0xc1, 0x3e, 0x07, 0xa8, 0xb5, 0x2a, 0x24, 0xa2, 0xe5, 0x02, 0xe2, 0xc2,
	0x0e, 0x59, 0x0b, 0xf6, 0x0c, 0xa6, 0x3d, 0x5d, 0x67, 0xe6, 0x9a, 0x86, 0x4f, 0xc8, 0xa3, 0x0e,
	0xbb, 0xcc, 0xcc, 0xf5, 0x6e, 0x4a, 0xa6, 0xaf, 0x90, 0x26, 0xd0, 0x90, 0x72, 0xae, 0xaf, 0x30,
	0xf9, 0x09, 0x82, 0x5f, 0x6a, 0xa9, 0x33, 0xa3, 0x34, 0xbd, 0x1e, 0x6d, 0x3d, 0xbc, 0x1e, 0x6d,
	0x2d, 0xed, 0x60, 0x54, 0x96, 0xaf, 0x44, 0xd7, 0x9d, 0x3e, 0xb4, 0xd9, 0x22, 0x33, 0x19, 0xf5,
	0x26, 0xe4, 0xb4, 0x4e, 0xfe, 0x04, 0xcf, 0xbe, 0x0f, 0x96, 0xab, 0xb2, 0xe1, 0x1d, 0xb2, 0x6b,
	0x3b, 0xf7, 0xb3, 0xe1, 0x0d, 0x0a, 0x79, 0x17, 0xd9, 0xad, 0x11, 0x8d, 0xce, 0x88, 0x71, 0x5e,
	0xdb, 0x98, 0xad, 0x20, 0x50, 0x5d, 0x75, 0xd4, 0xea, 0xe8, 0x8c, 0x0d, 0x27, 0xa2, 0xaf, 0x9b,
	0x6f, 0x73, 0xce, 0x6e, 0x60, 0xf4, 0x7e, 0xcd, 0x5e, 0x80, 0x67, 0x0f, 0x06, 0x3b, 0x19, 0x72,
	0x77, 0xce, 0xdc, 0xe2, 0xe3, 0xbb, 0x70, 0xbd, 0x69, 0x93, 0x07, 0xec, 0x1b, 0x98, 0x9c, 0xe3,
	0x07, 0x2a, 0xff, 0x3f, 0x9f, 0xc7, 0xc5, 0x9d, 0x47, 0x30, 0x79, 0x90, 0xfb, 0x04, 0x7c, 0xfb,
	0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x4b, 0xad, 0x5a, 0xc2, 0x94, 0x07, 0x00, 0x00,
}
